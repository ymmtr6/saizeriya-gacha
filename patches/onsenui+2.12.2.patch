diff --git a/node_modules/onsenui/esm/elements/ons-navigator/ios-slide-animator.js b/node_modules/onsenui/esm/elements/ons-navigator/ios-slide-animator.js
index 01b1617..ecba361 100644
--- a/node_modules/onsenui/esm/elements/ons-navigator/ios-slide-animator.js
+++ b/node_modules/onsenui/esm/elements/ons-navigator/ios-slide-animator.js
@@ -15,10 +15,10 @@ limitations under the License.
 
 */
 
-import IOSSwipeNavigatorAnimator from './ios-swipe-animator.js';
-import util from '../../ons/util.js';
-import animit from '../../ons/animit.js';
-import contentReady from '../../ons/content-ready.js';
+import IOSSwipeNavigatorAnimator from "./ios-swipe-animator.js";
+import util from "../../ons/util.js";
+import animit from "../../ons/animit.js";
+import contentReady from "../../ons/content-ready.js";
 
 const translate3d = (x = 0, y = 0, z = 0) => `translate3d(${x}, ${y}, ${z})`;
 
@@ -26,13 +26,17 @@ const translate3d = (x = 0, y = 0, z = 0) => `translate3d(${x}, ${y}, ${z})`;
  * Slide animator for navigator transition like iOS's screen slide transition.
  */
 export default class IOSSlideNavigatorAnimator extends IOSSwipeNavigatorAnimator {
-
-  constructor({ timing = 'cubic-bezier(0.3, .4, 0, .9)', delay = 0, duration = 0.4, ...rest } = {}) {
+  constructor({
+    timing = "cubic-bezier(0.3, .4, 0, .9)",
+    delay = 0,
+    duration = 0.4,
+    ...rest
+  } = {}) {
     super({ timing, delay, duration, ...rest });
 
     this.backgroundMask = util.createElement(
       `<div style="position: absolute; width: 100%; height: 100%;` +
-        `background-color: black; z-index: 2"></div>`
+        `background-color: rgba(0, 0, 0, 0); z-index: 2"></div>`
     );
   }
 
@@ -41,11 +45,11 @@ export default class IOSSlideNavigatorAnimator extends IOSSwipeNavigatorAnimator
     const left = toolbar._getToolbarLeftItemsElement();
     const right = toolbar._getToolbarRightItemsElement();
 
-    const excludeBackButton = function(elements) {
+    const excludeBackButton = function (elements) {
       const result = [];
 
       for (let i = 0; i < elements.length; i++) {
-        if (elements[i].nodeName.toLowerCase() !== 'ons-back-button') {
+        if (elements[i].nodeName.toLowerCase() !== "ons-back-button") {
           result.push(elements[i]);
         }
       }
@@ -54,8 +58,12 @@ export default class IOSSlideNavigatorAnimator extends IOSSwipeNavigatorAnimator
     };
 
     const other = []
-      .concat(left.children.length === 0 ? left : excludeBackButton(left.children))
-      .concat(right.children.length === 0 ? right : excludeBackButton(right.children));
+      .concat(
+        left.children.length === 0 ? left : excludeBackButton(left.children)
+      )
+      .concat(
+        right.children.length === 0 ? right : excludeBackButton(right.children)
+      );
 
     return {
       toolbarCenter: toolbar._getToolbarCenterItemsElement(),
@@ -65,19 +73,26 @@ export default class IOSSlideNavigatorAnimator extends IOSSwipeNavigatorAnimator
       content: page._getContentElement(),
       background: page._getBackgroundElement(),
       toolbar: toolbar,
-      bottomToolbar: page._getBottomToolbarElement()
+      bottomToolbar: page._getBottomToolbarElement(),
     };
   }
 
   _shouldAnimateToolbar(enterPage, leavePage) {
-    const toolbars = enterPage._canAnimateToolbar() && leavePage._canAnimateToolbar();
+    const toolbars =
+      enterPage._canAnimateToolbar() && leavePage._canAnimateToolbar();
 
     const enterToolbar = enterPage._getToolbarElement();
     const leaveToolbar = leavePage._getToolbarElement();
 
-    const isStatic = enterToolbar.hasAttribute('static') || leaveToolbar.hasAttribute('static');
-    const isMaterial = util.hasModifier(enterToolbar, 'material') || util.hasModifier(leaveToolbar, 'material');
-    const isTransparent = util.hasModifier(enterToolbar, 'transparent') || util.hasModifier(leaveToolbar, 'transparent');
+    const isStatic =
+      enterToolbar.hasAttribute("static") ||
+      leaveToolbar.hasAttribute("static");
+    const isMaterial =
+      util.hasModifier(enterToolbar, "material") ||
+      util.hasModifier(leaveToolbar, "material");
+    const isTransparent =
+      util.hasModifier(enterToolbar, "transparent") ||
+      util.hasModifier(leaveToolbar, "transparent");
 
     return toolbars && !isStatic && !isMaterial && !isTransparent;
   }
@@ -86,18 +101,22 @@ export default class IOSSlideNavigatorAnimator extends IOSSwipeNavigatorAnimator
     let title, label;
 
     const pageRect = element.getBoundingClientRect();
-    if (decomposition.backButtonLabel.classList.contains('back-button__label')) {
+    if (
+      decomposition.backButtonLabel.classList.contains("back-button__label")
+    ) {
       const labelRect = decomposition.backButtonLabel.getBoundingClientRect();
-      title = Math.round(pageRect.width / 2 - labelRect.width / 2 - labelRect.left);
+      title = Math.round(
+        pageRect.width / 2 - labelRect.width / 2 - labelRect.left
+      );
     } else {
       title = Math.round((pageRect.width / 2) * 0.6);
     }
 
-    if (decomposition.backButtonIcon.classList.contains('back-button__icon')) {
+    if (decomposition.backButtonIcon.classList.contains("back-button__icon")) {
       label = decomposition.backButtonIcon.getBoundingClientRect().right - 2;
     }
 
-    return {title, label};
+    return { title, label };
   }
 
   /**
@@ -119,93 +138,106 @@ export default class IOSSlideNavigatorAnimator extends IOSSwipeNavigatorAnimator
 
       const delta = this._calculateDelta(leavePage, enterPageDecomposition);
 
-      const shouldAnimateToolbar = this._shouldAnimateToolbar(enterPageTarget, leavePageTarget);
+      const shouldAnimateToolbar = this._shouldAnimateToolbar(
+        enterPageTarget,
+        leavePageTarget
+      );
 
       if (shouldAnimateToolbar) {
-
         animit.runAll(
+          animit(
+            [
+              enterPageDecomposition.content,
+              enterPageDecomposition.bottomToolbar,
+              enterPageDecomposition.background,
+            ],
+            this.def
+          ).default(
+            { transform: translate3d("100%") },
+            { transform: translate3d() }
+          ),
 
-          animit([enterPageDecomposition.content, enterPageDecomposition.bottomToolbar, enterPageDecomposition.background], this.def)
-            .default(
-              { transform: translate3d('100%') },
-              { transform: translate3d() }
-            ),
+          animit(enterPageDecomposition.toolbar, this.def).default(
+            { opacity: 0 },
+            { opacity: 1 }
+          ),
 
-          animit(enterPageDecomposition.toolbar, this.def)
-            .default({ opacity: 0 }, { opacity: 1 }),
+          animit(enterPageDecomposition.toolbarCenter, this.def).default(
+            { transform: translate3d("125%"), opacity: 1 },
+            { transform: translate3d(), opacity: 1 }
+          ),
 
-          animit(enterPageDecomposition.toolbarCenter, this.def)
-            .default(
-              { transform: translate3d('125%'), opacity: 1 },
-              { transform: translate3d(), opacity: 1 }
-            ),
+          animit(enterPageDecomposition.backButtonLabel, this.def).default(
+            { transform: translate3d(`${delta.title}px`), opacity: 0 },
+            {
+              transform: translate3d(),
+              opacity: 1,
+              transition: `opacity ${this.duration}s linear, transform ${this.duration}s ${this.timing}`,
+            }
+          ),
 
-          animit(enterPageDecomposition.backButtonLabel, this.def)
-            .default(
-              { transform: translate3d(`${delta.title}px`), opacity: 0 },
-              {
-                transform: translate3d(),
-                opacity: 1,
-                transition: `opacity ${this.duration}s linear, transform ${this.duration}s ${this.timing}`
-              }
-            ),
-
-          animit(enterPageDecomposition.other, this.def)
-            .default(
-              { opacity: 0 },
-              { css: { opacity: 1 }, timing: 'linear' }
-            ),
+          animit(enterPageDecomposition.other, this.def).default(
+            { opacity: 0 },
+            { css: { opacity: 1 }, timing: "linear" }
+          ),
 
-          animit([leavePageDecomposition.content, leavePageDecomposition.bottomToolbar, leavePageDecomposition.background], this.def)
+          animit(
+            [
+              leavePageDecomposition.content,
+              leavePageDecomposition.bottomToolbar,
+              leavePageDecomposition.background,
+            ],
+            this.def
+          )
             .default(
               { transform: translate3d(), opacity: 1 },
-              { transform: translate3d('-25%'), opacity: 0.9 }
+              { transform: translate3d("-25%"), opacity: 0.9 }
             )
-            .queue(done => {
+            .queue((done) => {
               this.backgroundMask.remove();
               unblock();
               callback();
               done();
             }),
 
-          animit(leavePageDecomposition.toolbarCenter, this.def)
-            .default(
-              { transform: translate3d(), opacity: 1 },
-              {
-                transform: translate3d(`-${delta.title}px`),
-                opacity: 0,
-                transition: `opacity ${this.duration}s linear, transform ${this.duration}s ${this.timing}`
-              }
-            ),
-
-          animit(leavePageDecomposition.backButtonLabel, this.def)
-            .default(
-              { transform: translate3d(), opacity: 1 },
-              { transform: translate3d(`-${delta.label}px`), opacity: 0 }
-            ),
+          animit(leavePageDecomposition.toolbarCenter, this.def).default(
+            { transform: translate3d(), opacity: 1 },
+            {
+              transform: translate3d(`-${delta.title}px`),
+              opacity: 0,
+              transition: `opacity ${this.duration}s linear, transform ${this.duration}s ${this.timing}`,
+            }
+          ),
 
-          animit(leavePageDecomposition.other, this.def)
-            .default( { opacity: 1 }, { css: { opacity: 0 }, timing: 'linear' })
+          animit(leavePageDecomposition.backButtonLabel, this.def).default(
+            { transform: translate3d(), opacity: 1 },
+            { transform: translate3d(`-${delta.label}px`), opacity: 0 }
+          ),
 
+          animit(leavePageDecomposition.other, this.def).default(
+            { opacity: 1 },
+            { css: { opacity: 0 }, timing: "linear" }
+          )
         );
-
       } else {
-
         animit.runAll(
-
-          animit(enterPage, this.def)
-            .default( { transform: translate3d('100%'), }, { transform: translate3d() }),
+          animit(enterPage, this.def).default(
+            { transform: translate3d("100%") },
+            { transform: translate3d() }
+          ),
 
           animit(leavePage, this.def)
-            .default( { transform: translate3d(), opacity: 1 }, { transform: translate3d('-25%'), opacity: .9 })
-            .queue(done => {
+            .default(
+              { transform: translate3d(), opacity: 1 },
+              { transform: translate3d("-25%"), opacity: 0.9 }
+            )
+            .queue((done) => {
               this.backgroundMask.remove();
               unblock();
               callback();
               done();
             })
         );
-
       }
     });
   }
@@ -232,89 +264,96 @@ export default class IOSSlideNavigatorAnimator extends IOSSwipeNavigatorAnimator
 
     const delta = this._calculateDelta(leavePage, leavePageDecomposition);
 
-    const shouldAnimateToolbar = this._shouldAnimateToolbar(enterPageTarget, leavePageTarget);
+    const shouldAnimateToolbar = this._shouldAnimateToolbar(
+      enterPageTarget,
+      leavePageTarget
+    );
 
     if (shouldAnimateToolbar) {
       animit.runAll(
-
-        animit([enterPageDecomposition.content, enterPageDecomposition.bottomToolbar, enterPageDecomposition.background], this.def)
-          .default(
-            { transform: translate3d('-25%'), opacity: .9 },
-            { transform: translate3d(), opacity: 1 }
-          ),
-
-        animit(enterPageDecomposition.toolbarCenter, this.def)
-          .default(
-            { transform: translate3d(`-${delta.title}px`), opacity: 0 },
-            {
-              transform: translate3d(),
-              opacity: 1,
-              transition: `opacity ${this.duration}s linear, transform ${this.duration}s ${this.timing}`
-            }
-          ),
-
-        animit(enterPageDecomposition.backButtonLabel, this.def)
-          .default(
-            { transform: translate3d(`-${delta.label}px`) },
-            { transform: translate3d() }
-          ),
-
-        animit(enterPageDecomposition.other, this.def)
-          .default(
-            { opacity: 0 },
-            { css: { opacity: 1 }, timing: 'linear' }
-          ),
-
-        animit([leavePageDecomposition.content, leavePageDecomposition.bottomToolbar, leavePageDecomposition.background], this.def)
+        animit(
+          [
+            enterPageDecomposition.content,
+            enterPageDecomposition.bottomToolbar,
+            enterPageDecomposition.background,
+          ],
+          this.def
+        ).default(
+          { transform: translate3d("-25%"), opacity: 0.9 },
+          { transform: translate3d(), opacity: 1 }
+        ),
+
+        animit(enterPageDecomposition.toolbarCenter, this.def).default(
+          { transform: translate3d(`-${delta.title}px`), opacity: 0 },
+          {
+            transform: translate3d(),
+            opacity: 1,
+            transition: `opacity ${this.duration}s linear, transform ${this.duration}s ${this.timing}`,
+          }
+        ),
+
+        animit(enterPageDecomposition.backButtonLabel, this.def).default(
+          { transform: translate3d(`-${delta.label}px`) },
+          { transform: translate3d() }
+        ),
+
+        animit(enterPageDecomposition.other, this.def).default(
+          { opacity: 0 },
+          { css: { opacity: 1 }, timing: "linear" }
+        ),
+
+        animit(
+          [
+            leavePageDecomposition.content,
+            leavePageDecomposition.bottomToolbar,
+            leavePageDecomposition.background,
+          ],
+          this.def
+        )
           .default(
             { transform: translate3d() },
-            { transform: translate3d('100%') }
+            { transform: translate3d("100%") }
           )
           .wait(0)
-          .queue(done => {
+          .queue((done) => {
             this.backgroundMask.remove();
             unblock();
             callback();
             done();
           }),
 
-        animit(leavePageDecomposition.toolbar, this.def)
-          .default(
-            { opacity: 1 },
-            { opacity: 0 }
-          ),
-
-        animit(leavePageDecomposition.toolbarCenter, this.def)
-          .default(
-            { transform: translate3d() },
-            { transform: translate3d('125%') }
-          ),
-
-        animit(leavePageDecomposition.backButtonLabel, this.def)
-          .default(
-            { transform: translate3d(), opacity: 1 },
-            {
-              transform: translate3d(`${delta.title}px`),
-              opacity: 0,
-              transition: `opacity ${this.duration}s linear, transform ${this.duration}s ${this.timing}`
-            }
-          )
+        animit(leavePageDecomposition.toolbar, this.def).default(
+          { opacity: 1 },
+          { opacity: 0 }
+        ),
+
+        animit(leavePageDecomposition.toolbarCenter, this.def).default(
+          { transform: translate3d() },
+          { transform: translate3d("125%") }
+        ),
+
+        animit(leavePageDecomposition.backButtonLabel, this.def).default(
+          { transform: translate3d(), opacity: 1 },
+          {
+            transform: translate3d(`${delta.title}px`),
+            opacity: 0,
+            transition: `opacity ${this.duration}s linear, transform ${this.duration}s ${this.timing}`,
+          }
+        )
       );
     } else {
       animit.runAll(
-
-        animit(enterPage, this.def)
-          .default(
-            { transform: translate3d('-25%'), opacity: .9 },
-            { transform: translate3d(), opacity: 1 }
-          ),
+        animit(enterPage, this.def).default(
+          { transform: translate3d("-25%"), opacity: 0.9 },
+          { transform: translate3d(), opacity: 1 }
+        ),
 
         animit(leavePage, this.def)
           .default(
             { transform: translate3d() },
-            { transform: translate3d('100%') }
+            { transform: translate3d("100%") }
           )
-          .queue(done => {
+          .queue((done) => {
             this.backgroundMask.remove();
             unblock();
             callback();
